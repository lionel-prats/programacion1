Recortar un string vvv 

string = "Camasutra"
string_recortado = string[:-5]
print(string)
print(string_recortado)

-----

Validar si puedo convertir un string en float vvv 

entrada = "314.159"

try:
    valor_float = float(entrada)
    print(f"El valor '{entrada}' se puede convertir a float: {valor_float}")
except ValueError:
    print(f"El valor '{entrada}' no se puede convertir a float.")

-----

FORMA QUE ENCONTRE PARA VALIDAR SIN LUGAR A ERRORES SI UN DATO PUEDE SER CASTEADO A FLOAT vvv 

def stark_normalizar_datos(valor):
  if type(valor) == int:
    return "Es int, no hace falta castearlo"
  elif type(valor) == str:
    try:
      valor = float(valor)
      return "Es string y se puede castear a float"
    except ValueError:
      return "Es string pero no se puede castear a float"
  else:
    return "No es string ni int. Si es float ya esta casteado, y si es otro tipo de dato no hace falta castearlo"
     
print(f"int 15 | Rta = {stark_normalizar_datos(15)}\n")

print(f"float 25.4 | Rta = {stark_normalizar_datos(25.4)}\n")

print(f"str '118.457' | Rta = {stark_normalizar_datos('118.457')}\n")

print(f"str '118.4.57' | Rta = {stark_normalizar_datos('118.4.57')}\n")

print(f"bool False | Rta = {stark_normalizar_datos(False)}\n")

print(f"str 'AC010BO' | Rta = {stark_normalizar_datos('AC010BO')}\n")

print(f"str '154' | Rta = {stark_normalizar_datos('154')}\n")

print(f"dict (15: 15.5) | Rta = {stark_normalizar_datos({15: 15.5})}\n")

print(f"tuple (15, 20) | Rta = {stark_normalizar_datos((15, 20))}\n")

print(f"list [15, 20] | Rta = {stark_normalizar_datos([15, 20])}\n")

-----

Hasta ahora, la forma más óptima que encontré para validar sin lugar a errores si un dato puede ser casteado a float

def castear_dato_a_float(dato):
  """  
  recibe un dato y si es posible lo retorna casteado a float\n 
  [dato] -> dato a intentar castear a float\n
  return -> (float) dato casteado a float (si es posible), (bool) False si no se puede castear 
  """
  if type(dato) == int or type(dato) == str and dato.replace(".", "", 1).isdigit():
    return float(dato)
  elif type(dato) == float:
    return dato
  return False

dato_original = []
dato_original = {}
dato_original = "15a4.5"
dato_original = False
dato_original = 15.5
dato_original = 15
dato_original = "156.8.5"
dato_original = "156.8"

print("dato_original | ", type(dato_original), " | ", dato_original)

dato_casteado = castear_dato_a_float(dato_original) 

print("dato_casteado | ", type(dato_casteado), " | ", dato_casteado)

-----
FORMA QUE ENCONTRE PARA RECORRER UNA LISTA DE DICCIONARIOS Y CASTEAR A FLOAT TODAS LAS PROPIEDADES FACTIBLES DE SER CASTEADAS vvv 

personas = [
  {
    "nombre": "Lionel",
    "apellido": "Prats",
    "edad": 38,
    "anio_nacimiento": "1985",
    "altura": "1.83",
    "patente": "A010BO"
  },
  {
    "nombre": "Sergio",
    "apellido": "Balestrini",
    "edad": 39,
    "anio_nacimiento": "1984",
    "altura": "1.85",
    "patente": "AF154HJ"
  },
  {
    "nombre": "Santiago",
    "apellido": "Fiorini",
    "edad": 40,
    "anio_nacimiento": "1983",       
    "altura": "1.90",
    "patente": "PFG264"
  }
]

def stark_normalizar_datos(lista: list[dict]) -> list[dict]:
  """  
  ACCION: recorre una lista de diccionarios y castea a float toda propiedad compatible con ese formato\n
  PARAMETROS:\n 
  [lista] -> lista de diccionarios a formatear\n
  RETURN: una lista de diccionarios igual a la recibida, en la que cada propiedad factible de ser casteada a float será de ese tipo de dato
  """
  respuesta = None
  nueva_lista = []
  for diccionario in lista:
    nuevo_diccionario = {}
    for k, v in diccionario.items():
      if type(v) == str:
        resultado_casteo = convertir_string_en_float(v)
        if resultado_casteo:
          nuevo_diccionario[k] = resultado_casteo
          if not respuesta:
            respuesta = "Datos normalizados"
        else:
          nuevo_diccionario[k] = v
      else:
        nuevo_diccionario[k] = v
    nueva_lista.append(nuevo_diccionario)
  return nueva_lista

def convertir_string_en_float(string):
  """ 
  ACCION: recibe una string, y de ser compatible es casteado a float:\n 
  [string] -> string a formatear\n
  RETURN: el string recibido casteado a float si el tipo de dato original es compatible, False en caso contrario
  """
  if type(string) == str:
    try:
      return float(string)
    except ValueError:
      return False
  return False
  

print(personas, "\n")
personas = stark_normalizar_datos(personas)
print(personas)

-----

Verificar tipo de dato

print(type(123))
print(type(1.23))
print(type("123"))
print(type(["123"]))
print( type( {"number": 123} ) )
print(type(True))

-----

compresion de dicionarios 

def formatear_diccionario(diccionario, claves):
    nuevo_diccionario = [{clave: persona[clave] for clave in claves} for persona in diccionario]
    return nuevo_diccionario

personas = [
    {
        "nombre": "Lionel",
        "apellido": "Prats",
        "edad": "38"
    },
    {
        "nombre": "Sergio",
        "apellido": "Balestrini",
        "edad": "39"
    },
    {
        "nombre": "Santiago",
        "apellido": "Fiorini",
        "edad": "40"
    }
]

claves_a_seleccionar = ["nombre", "edad"]
claves_a_seleccionar = ["apellido", "edad"]
claves_a_seleccionar = ["nombre"]
claves_a_seleccionar = ["apellido"]
claves_a_seleccionar = ["edad"]
claves_a_seleccionar = ["nombre", "apellido"]
claves_a_seleccionar = ["edad", "apellido"]

print(personas)
print(formatear_diccionario(personas, claves_a_seleccionar))

-----

obtener la suma de una determinada clave numerica de los diccionarios de una lista -> sum() + compresion de diccionarios

personas = [
  {
    "nombre": "Lionel",
    "apellido": "Prats",
    "edad": 38,
    "anio_nacimiento": "1985",
    "altura": "1.83",
    "patente": "A010BO"
  },
  {
    "nombre": "Sergio",
    "apellido": "Balestrini",
    "edad": 39,
    "anio_nacimiento": "1984",
    "altura": "1.85",
    "patente": "AF154HJ"
  },
  {
    "nombre": "Santiago",
    "apellido": "Fiorini",
    "edad": 40,
    "anio_nacimiento": "1983",       
    "altura": "1.90",
    "patente": "PFG264"
  },"sad"
]

suma_edades = sum(persona["edad"] for persona in personas if "edad" in persona and isinstance(persona["edad"], (int, float)))

print("La suma de las edades es:", suma_edades)

-----

funciones max() y min()

array = [70, 54, 16, 51]
print(max(array))
print(min(array))

listado_personas = [
{
    "nombre": "lionel",
    "edad": 2315,
    "velocidad": 83.5151151531,
    "fuerza": 7.75862
},
{
    "nombre": "rocio",
    "edad": 2300,
    "velocidad": 84,
    "fuerza": 7
},
{
    "nombre": "carolina",
    "edad": 270,
    "velocidad": 83,
    "fuerza": 6
}
]

# MAXIMOS vvv 
edad_maxima = max(listado_personas, key = lambda diccionario_persona: diccionario_persona['edad'])['edad']
print(f"edad maxima = {edad_maxima}")

velocidad_maxima = max(listado_personas, key = lambda diccionario_persona: diccionario_persona['velocidad'])['velocidad']
print(f"velocidad maxima = {velocidad_maxima}")

fuerza_maxima = max(listado_personas, key = lambda diccionario_persona: diccionario_persona['fuerza'])['fuerza']
print(f"fuerza maxima = {fuerza_maxima}")

# MINIMOS vvv
edad_minima = min(listado_personas, key = lambda diccionario_persona: diccionario_persona['edad'])['edad']
print(f"edad minima = {edad_minima}")

velocidad_minima = min(listado_personas, key = lambda diccionario_persona: diccionario_persona['velocidad'])['velocidad']
print(f"velocidad minima = {velocidad_minima}")

fuerza_minima = min(listado_personas, key = lambda diccionario_persona: diccionario_persona['fuerza'])['fuerza']
print(f"fuerza minima = {fuerza_minima}")

----- 

# FUNCIONES LAMBDA

# -> las funciones lambda o anonimas son una manera abreviada de escribir una funcion simple. 
# -> segun la documentacion de python "... son solo una notacion abreviada si eres demasiado perezoso para definir una funcion"

print ("\n---------- FUNCIONES LAMBDA ----------\n")

def sumar(a, b):
    return a + b

sumar_lambda = lambda a, b: a + b

print(sumar_lambda(10, 8))

# con lambda es comun usar metodos y funciones propias de python como map y filter

# -----------------------------------------------------------------------------------------------

# OPERADORES TERNARIOS (mas conocidos en python como EXPRESIONES CONDICIONALES) 
print ("\n---------- OPERADORES TERNARIOS ----------\n")


mayor = lambda a, b: f"{a}.1 es mayor" if a > b else f"{b}.2 es mayor"
print(mayor(26,26)) 

# if 8 > 4 ? True : False
print(True if 8 > 9 else False)

input_nombre_usuario = "None"
input_nombre_usuario = None
print(input_nombre_usuario if input_nombre_usuario else "No está definido")

# -----------------------------------------------------------------------------------------------

# LISTAS ANIDADAS

print ("\n---------- LISTAS ANIDADAS ----------\n")

matriz = [["Marty", "McFly"], ["Emmett", "Brown"]]

print(matriz[0][0])
print(matriz[0][1])
print(matriz[1][0])
print(matriz[1][1])

print ("----------------------------------------")

for linea in matriz:
    for columna in linea: 
        print(columna)

# -----------------------------------------------------------------------------------------------

# LISTAS ANIDADAS

print ("\n---------- COPIAR LISTAS ----------\n")

array_1 = ["lio", "marian", "rodri"]
array_2 = array_1 # "a array_2 le pusimos un puntero de array_1"

array_1[2] = "saia"

print(array_1)
print(array_2)

array_2[1] = "luigi"
print(array_1)
print(array_2)


# lista_2 es referencia de lista_1, cualquier cambio en una variable en cualquier momento de la ejecuicion impactara en la otra

print("-----")

# EXISTEN 2 TIPOS DE COPIAS POSIBLES: 

# 1) SUPERFICIAL (SHALLOW COPY) -> solamente se copian las referencias a los elementos vontenidos en el objeto
lista_1 = [["Marty", "McFly"], "Emmett", "Biff"]
lista_2 = lista_1.copy() # "a lista_2 le pusimos un puntero de lista_1"

print("shallow copy")
lista_1[0][1] = "Carlos"
print(lista_1)
print(lista_2)
lista_2[0][0] = "Pinocho"
print(lista_1)
print(lista_2)

# 2) PROFUNDA (DEEP COPY) -> si el objeto contiene subojetos estos se copian recursivamente
from copy import deepcopy
lista_3 = [["Marty", "McFly"], "Emmett", "Biff"]
lista_4 = deepcopy(lista_3)

print("deep copy")
lista_3[0][1] = "Carlos"
print(lista_3)
print(lista_4)
lista_4[0][0] = "Pinocho"
print(lista_3)
print(lista_4)

# -----------------------------------------------------------------------------------------------

# VACIAR LISTAS Y DICCIONARIOS

print ("\n---------- VACIAR LISTAS Y DICCIONARIOS ----------\n")

lista_con_elementos = ["monos", "en", "verano"]
print(lista_con_elementos)
puntero_a_lista_con_elementos = lista_con_elementos
print("puntero vvv")
print(puntero_a_lista_con_elementos)
puntero_a_lista_con_elementos[0] = ["gacelas"]
puntero_a_lista_con_elementos[1] = ["sin"]
puntero_a_lista_con_elementos[2] = ["sueter"]
print(lista_con_elementos)
lista_con_elementos.clear()
print(puntero_a_lista_con_elementos)

print("-----")

diccionario_con_elementos =\
{
    "nombre": "peter",
    "apellido": "capusotto"
}
print(diccionario_con_elementos)
diccionario_con_elementos.clear()
print(diccionario_con_elementos)

# -----------------------------------------------------------------------------------------------

# insert()

# el metodo insert() añade un elemento en una posicion o indice determinado 

print ("\n---------- insert() ----------\n")

lista_insert = ["la", "vuelta", "mundo"]
lista_insert.insert(2, ["al", "carajo"])
print(lista_insert)

# -----------------------------------------------------------------------------------------------

# extend()

# el metodo extend() permite añadir una lista a la lista inicial 

print ("\n---------- extend() ----------\n")

lista_extend = ["la", "vuelta", "mundo"]
lista_extend.insert(2, "al")
lista_extend.extend(["en", 80, "dias"])
print(lista_extend)

# -----------------------------------------------------------------------------------------------

# pop()

# el metodo pop() elimina y retorna el elemento ubicado en el indice pasado por parametro; por defecto elimina el ultimo elemento 

print ("\n---------- pop() ----------\n")

lista_pop = ["la", "gran", "bestia", "pop"]
print(lista_pop)
pop_por_defecto = lista_pop.pop()
print(f"por defecto se elimino el ultimo elemento, \"{pop_por_defecto}\"")
print(lista_pop)
pop_especifico = lista_pop.pop(1)
print(f"esta vez le pasamos el indice 1, asi que se elimino \"{pop_especifico}\"")
print(lista_pop)

# -----------------------------------------------------------------------------------------------

# remove()

# el metodo remove() recibe como argumento un objeto y lo borra de la lista

print ("\n---------- remove() ----------\n")

lista_remove = ["la", "isla", "siniestra"]
print(lista_remove)
lista_remove.remove("isla")
print(lista_remove)

# -----------------------------------------------------------------------------------------------

# index()

# el metodo index() recibe como parametro un objeto y devuelve el indice de su primera aparicion

print ("\n---------- index() ----------\n")

lista_index = ["la", "gran", "isla", "siniestra", "y", "la", "isla", "soleada"]
print(lista_index)
print(lista_index.index("isla"))

# -----------------------------------------------------------------------------------------------

# enumerate()

# si necesitamos un indice acompañadp con la lista, que tome valores desde 0 hasta n-1

print ("\n---------- enumerate() ----------\n")

lista_enumerate = ["git init", "git add", "git commit", "git push", "git fetch", "git merge"]
for i, el in enumerate(lista_enumerate):
    print(i, el)

# -----------------------------------------------------------------------------------------------

# zip()

# permite iterar multiples listas a la vez
# por cada iteracion retorna una tupla con el elemento n de cada lista 

print ("\n---------- zip() ----------\n")

lista_nombres = ["lionel", "luis", "rafa"]
lista_edades = [38, 32, 23]
lista_equipos = ["all-boys", "river", "caracas"]

for nombre, edad, equipo in zip(lista_nombres, lista_edades, lista_equipos):
    print(f"{nombre} tiene {edad} años y es hincha de {equipo}")

# -----------------------------------------------------------------------------------------------

# Mas aplicaciones para zip() 

"""
estoy trabajando con python
tengo las listas:
claves = ["nombre", "apellido", "edad"]
valores = ["lionel", "prats", "38"]
necesito armar el diccionario:
diccionario = {
  "nombre": "lionel", 
  "apellido": "prats", 
  "edad": "38"
}
cual es la forma mas eficiente y profesional de hacerlo?
"""

claves = ["nombre", "apellido", "edad"]
valores = ["lionel", "prats", "38"]

# objeto = zip(claves, valores)
# print(type(objeto), objeto)
# for item in objeto:
#     print(type(item), item)

# lista = list(zip(claves, valores))
# print(type(lista), lista)
# for item in lista:
#   print(type(item), item)

diccionario = dict(zip(claves, valores))
print(type(diccionario), diccionario)
for k, v in diccionario.items():
  print(k, v)
  
-----------------------------------------------------------------------------------------------

# map()

# la funcion map() pasa como parametros a una funcion a cada uno de los elementos de una lista, dando como resultado una nueva lista formada por los elementos que dicha funcion retorna

print ("\n---------- map() ----------\n")

lista_map = ["lionel", "luis", "rafa"]
iterable = map(str.upper, lista_map)
print(iterable)
print(f"print por consola de un iterable -> {iterable}")
for i, el in enumerate(iterable):
    print(i, el)

iterable_casteado_como_lista = list(map(str.upper, lista_map))

print(iterable_casteado_como_lista)

def multiplicar_por_2(numero):
    return numero * 2 

lista_numeros_map = [3, 6, 9]
print(lista_numeros_map)
for i, el in enumerate(map(multiplicar_por_2, lista_numeros_map)):
    print(i, el)

# -----------------------------------------------------------------------------------------------

# filter()

# la funcion filter() filtra una lista de elementos para los que una funcion devuelve True

print ("\n---------- filter() ----------\n")

lista_filter = [17, 71, 18]

iterable_filter = filter(lambda elemento: elemento >= 18, lista_filter)
print(iterable_filter)

print("primera iteracion del iterable vvv")
for i, el in enumerate(iterable_filter):
    print(i, el)
print("segunda iteracion del iterable vvv")
for i, el in enumerate(iterable_filter):
    print(i, el)
print("casteo a lista del iterable vvv")
print(list(iterable_filter))

# -----------------------------------------------------------------------------------------------

# reduce()

# la funcion reduce() se utiliza principalmente para llevar a cabo un calculo acumulativo sobre una lista de valores y retornar el resultado, está incluiida en el módulo functools

print ("\n---------- reduce() ----------\n")

lista_reduce = [17, 71, 18]
from functools import reduce
suma = reduce(lambda x, y: x + y, lista_reduce)
print(lista_reduce)
print(suma)

# -----------------------------------------------------------------------------------------------

# shuffle(lista)

# es un metodo del modulo random que se utiliza para mezclar una lista

print ("\n---------- shuffle(lista) ----------\n")

from random import shuffle
lista_shuffle = [1, 2, 3, 4, 5]
shuffle(lista_shuffle)
print(lista_shuffle)

# -----------------------------------------------------------------------------------------------

# sort()

# el metodo sort() ordena los elementos de menor a mayor por defecto

print ("\n---------- sort() -> de menor a mayor (defecto) ----------\n")

lista_sort_nombres = ["Coca", "Moca", "Boca"]
lista_sort_numeros = [40, 50, 30]
lista_sort_numeros_float = [40.999999, 50.000000001, 30]
lista_sort_numeros_string = ["3", "299", "1999"]

lista_sort_nombres.sort()
lista_sort_numeros.sort()
lista_sort_numeros_float.sort()
lista_sort_numeros_string.sort()

print(lista_sort_nombres)
print(lista_sort_numeros)
print(lista_sort_numeros_float)
print(lista_sort_numeros_string)

print ("\n---------- sort(revert = True) -> de mayor a menor ----------\n")

lista_sort_nombres.sort(reverse = True)
lista_sort_numeros.sort(reverse = True)
lista_sort_numeros_float.sort(reverse = True)
lista_sort_numeros_string.sort(reverse = True)

print(lista_sort_nombres)
print(lista_sort_numeros)
print(lista_sort_numeros_float)
print(lista_sort_numeros_string)

print ("\n---------- sort(key = ...) ----------\n")

# tiene un parametro key para especificar una funcion que se llamara por cada elemento de la lista y su retorno se utilizara para hacer las comparaciones 

lista_sort_key = ["independiente", "boca", "huracan"]

lista_sort_key.sort(key = len)
# el parametro es key, y le estamos asignando el len (largo) de los elementos
# le estamos diciendo "ordená la lista por el largo de las palabras" 
# por defecto la va a ordenar de forma ASC

print(lista_sort_key)

lista_sort_key_2 = ["independiente", "boca", "huracan"]
lista_sort_key_2.sort()
print(lista_sort_key_2)

# buscar metodos para listas
# buscar metodos para diccionarios
# buscar metodos para strings
# buscar building functions (funciones ya armadas para facilitarnos cosas dentro del lenguaje)

----- 

# diccionario anidado

print ("\n---------- DICCIONARIOS ANIDADOS ----------\n")

diccionario = {
    'name' : 'Marty',
    'addr': {
        'number': 9303,
        'street':'Lyon Drive'
    }
}
print(diccionario['addr']['number'], diccionario['addr']['street'])

# -----------------------------------------------------------------------------------------------

# recorrer diccionarios

print ("\n---------- RECORRER DICCIONARIOS ----------\n")

diccionario = {
    'name' : 'Marty', 
    'edad' : 18
}
for clave in diccionario:
    print(clave, diccionario[clave])

# -----------------------------------------------------------------------------------------------

# copiar diccionarios

print ("\n---------- COPIAR DICCIONARIOS - shallow copy ----------\n")

diccionario = {
    'edad' : 18,
    'name' : ['Marty','Mcfly']
}
diccionario_copia = diccionario.copy()
diccionario_copia = diccionario.copy()
diccionario['name'][0] = "Lionel"
diccionario['name'][1] = "Prats"
diccionario['edad'] = 38
print(diccionario)
print(diccionario_copia)
# en este ejemplo, en diccionario_copia, se modifica el subobjeto de typo list asociado a "name", pero no el asiciado a "edad"

# -----------------------------------------------------------------------------------------------

# copiar diccionarios

print ("\n---------- COPIAR DICCIONARIOS - deep copy ----------\n")

from copy import deepcopy
diccionario_deep = {
    'edad' : 18,
    'name' : ['Marty','Mcfly']
}
diccionario_deep_copia = deepcopy(diccionario_deep)
diccionario_deep['name'][0] = "Lionel"
diccionario_deep['name'][1] = "Prats"
diccionario_deep['edad'] = 38
print(diccionario_deep)
print(diccionario_deep_copia)

# -----------------------------------------------------------------------------------------------

# get()
print ("\n---------- get() ----------\n")

diccionario = {
    'name' : 'Marty', 
    'edad' : 18
}
print(diccionario.get('name','NO NAME')) # Marty

print(diccionario.get('nombre','NO NAME')) # NO NAME
# print(diccionario["nombre"]) # ERROR

# -----------------------------------------------------------------------------------------------

# keys()

print ("\n---------- keys() ----------\n")

# El método keys() devuelve una lista con todas las claves del diccionario.

diccionario = {
    'name' : 'Marty', 
    'edad' : 18
}
print(list(diccionario.keys()))
# ['name', 'edad']

# -----------------------------------------------------------------------------------------------

# values()

print ("\n---------- values() ----------\n")

# El método values() devuelve una lista con todos los valores del diccionario.

diccionario = {
    'name' : 'Marty', 
    'edad' : 18
}
print(diccionario.values())
print(list(diccionario.values()))
# ['Marty', 18]

# -----------------------------------------------------------------------------------------------

# items()

print ("\n---------- items() ----------\n")

# El método items() devuelve una lista con las claves y valores del diccionario. Si se convierte en lista se puede acceder utilizando el índice.

diccionario = {
    'name' : 'Marty', 
    'edad' : 18
}
print(diccionario.items())
print(list(diccionario.items()))
# [('name', 'Marty'), ('edad', 18)]

# -----------------------------------------------------------------------------------------------

# pop()

print ("\n---------- pop() ----------\n")

# El método pop() busca y elimina la key que se pasa como parámetro y devuelve su valor asociado. Dará un error si se intenta eliminar una key que no existe. Pero se puede pasar un segundo parámetro que es el valor a devolver si la key no se ha encontrado. En este caso si no se encuentra no habría error.

diccionario = {
    'name' : 'Marty', 
    'edad' : 18
}

edad_eliminada = diccionario.pop('edad')
print(edad_eliminada) # 18
print(diccionario) # {'name': 'Marty'}

# apellido_eliminado = diccionario.pop('apellido')
# print(apellido_eliminado) # ERROR
apellido_eliminado = diccionario.pop('apellido', "NO EXISTE CLAVE 'APELLIDO'") # ERROR
print(apellido_eliminado) # NO EXISTE CLAVE 'APELLIDO'

# -----------------------------------------------------------------------------------------------

# update()

print ("\n---------- update() ----------\n")

# El método update() se llama sobre un diccionario y tiene como entrada otro diccionario. Los value son actualizados y si alguna key del nuevo diccionario no esta, es añadida.

diccionario = {
    'name' : 'Lionel', 
    'apellido' : 'Pratz', 
    'edad' : 29
}

diccionario.update({
    'apellido' : 'Prats',
    'nacionalidad' : 'Argentino',
    'edad' : 38
})
print(diccionario)

# -----------------------------------------------------------------------------------------------

# clear()

print ("\n---------- clear() ----------\n")

# El método clear() elimina todo el contenido del diccionario.

diccionario_con_elementos =\
{
    "nombre": "peter",
    "apellido": "capusotto"
}
print(diccionario_con_elementos)
diccionario_con_elementos.clear()
print(diccionario_con_elementos)

----- 

set()

listado_personas = [
    {
      "nombre": "ale",
      "cuadro": "estudiantes"
    },
    {
      "nombre": "bata",
      "cuadro": "independiente"
    },
    {
      "nombre": "cabe",
      "cuadro": "boca"
    },
    {
      "nombre": "checho",
      "cuadro": "racing"
    },
    {
      "nombre": "emi",
      "cuadro": "boca"
    },
    {
      "nombre": "fara",
      "cuadro": "independiente"
    },
    {
      "nombre": "juan",
      "cuadro": "boca"
    },
    {
      "nombre": "lionel",
      "cuadro": "all boys"
    },
    {
      "nombre": "maro",
      "cuadro": "boca"
    },
    {
      "nombre": "negro",
      "cuadro": "river"
    }
]

# Utilizamos un conjunto (set) para almacenar los valores únicos de la propiedad "cuadro"
cuadros = set() # Build an unordered collection of unique elements.

for persona in listado_personas:
    cuadros.add(persona["cuadro"])
print(type(cuadros))
print(cuadros)

cuadros = list(cuadros)
print(type(cuadros))
print(cuadros)

cuadros.sort()

for cuadro in cuadros:
    print(cuadro)

----- 

cantidad de valores que se repiten segun clave en una lista de diccionarios vvv 

def cantidad_valores_segun_clave(lista: list[dict], clave) ->dict:
    diccionario_resultante = {}
    for diccionario in lista:
        nueva_clave = diccionario.get(clave, f"No existe \"{clave}\"") 
        if not nueva_clave:
            nueva_clave = f"No existe \"{clave}\""
        diccionario_resultante[nueva_clave] = diccionario_resultante.get(nueva_clave, 0) + 1
    return diccionario_resultante

-----

EXCEPCIONES 

documentacion oficial - excepciones incorporadas en el lenguaje vvv
https://docs.python.org/3/library/exceptions.html

----- 

simil __LINE__

from inspect import currentframe as linea
print(linea().f_lineno)

----- 

compresion de listas (comprenhension list) (ver clase 15 de programacion I para mas ejemplos)

numeros = [1, 2, 3, 4, 5] 
lista_dobles_comprension = [numero * 2 for numero in numeros]
print(lista_dobles_comprension)

----- 

TECNICA PARA LLAMAR DINAMICAMENTE AL GETTER DE UNA CLASE vvv 

class Mono:
    def __init__(self, valor):
        self.valor = valor

    def get_valor_por_2(self):
        return self.valor * 2

    def get_valor_por_3(self):
        return self.valor * 3

    def get_valor_por_4(self):
        return self.valor * 4

    def get_valor_por_5(self):
        return self.valor * 5

    def get_valor_por_6(self):
        return self.valor * 6

def ejecutar_getter(instancia_de_clase_a_evaluar, nombre_getter):
    # Utiliza getattr para obtener el método según el nombre proporcionado.
    metodo = getattr(instancia_de_clase_a_evaluar, nombre_getter, None)
    
    if metodo is not None and callable(metodo):
        # Si el método existe y es callable, ejecútalo.
        return metodo()
    else:
        return None

# Parámetro dinámico que especifica qué getter ejecutar.
getter_a_ejecutar = "get_valor_por_4"

# Crear una instancia de Mono
instancia_clase_mono = Mono(10)

# Ejecutar el getter según el parámetro dinámico.
resultado = ejecutar_getter(instancia_clase_mono, getter_a_ejecutar)

if resultado is not None:
    print(f"Resultado: {resultado}")
else:
    print("El getter especificado no existe o no es callable.")

-----