3.4) 
Basandote en la función 'stark_calcular_imprimir_heroe' crear la función ‘stark_calcular_imprimir_guardar_heroe_genero’ que además reciba un string el cual representará el género a evaluar.  El formato de mensaje a imprimir deberá ser estilo:
Mayor Altura: Nombre: Gamora | Altura: 183.65
Además la función deberá guardar en un archivo csv todos los datos del heroe obtenido.
Reutilizar: 'calcular_max_min_dato_genero', 'obtener_nombre_y_dato', 'imprimir_dato' y 'guardar_archivo'. 
En el caso de 'guardar_archivo' el nombre del archivo debe respetar el formato:
heroes_calculo_key_genero.csv
Donde:
cálculo: representará el string máximo o mínimo
key: representará cual es la key la cual se tiene que hacer el cálculo
genero: representará el género a calcular.
Ejemplo: para calcular el héroe más alto femenino, el archivo se deberá llamar:
heroes_maximo_altura_F.csv
Esta función retornará True si pudo guardar el archivo, False caso contrario

---------- 
PARTE 4

4.1)
Basandote en la función 'sumar_dato_heroe', crear la función llamada 'sumar_dato_heroe_genero' la cual deberá tener un parámetro extra del tipo string que representará el género con el que se va a trabajar.
Esta función antes de realizar la suma en su variable sumadora, deberá validar lo siguiente:
El tipo de dato del héroe debe ser diccionario.
El héroe actual de la iteración no debe estar vacío (ser diccionario vacío)
El género del héroe debe coincidir con el pasado por parámetro.
Una vez que cumpla con las condiciones, podrá realizar la suma. La función deberá retornar la suma del valor de la key de los héroes o heroínas que cumplan las condiciones o 0 en caso de que no se cumplan las validaciones

4.2)
Crear la función 'cantidad_heroes_genero' la cual recibirá por parámetro la lista de héroes y un string que representará el género a buscar. La función deberá sumar la cantidad de héroes o heroínas que cumplan con la condición de género pasada por parámetro, retornará dicha suma, usar las funciones filter y lambda.

4.3)
Basandote en la función 'calcular_promedio', crear la función 'calcular_promedio_genero' la cual tendrá como parámetro extra un string que representará el género a buscar. la lógica es similar a la función anteriormente mencionada en el enunciado. Reutilizar las funciones: 'sumar_dato_heroe_genero', 'cantidad_heroes_genero' y 'dividir'.
retornará el promedio obtenido, según la key y género pasado por parámetro.

4.4)
Basandote en la función ‘stark_calcular_imprimir_promedio_altura', desarrollar la función 'stark_calcular_imprimir_guardar_ promedio_altura_genero' la cual tendrá como parámetro extra un string que representará el género de los héroes a buscar. 
La función antes de hacer nada, deberá validar que la lista no esté vacía.  En caso de no estar vacía: calculará el promedio y lo imprimirá formateado al estilo:
Altura promedio género F: 178.45
En caso de estar vacía, imprimirá como mensaje: 
Error: Lista de héroes vacía. 
Luego de imprimir la función deberá guardar en un archivo los mismos datos. El nombre del archivo debe tener el siguiente formato:
		heroes_promedio_altura_genero.csv
		Donde:
genero: será el género de los héroes a calcular, siendo M y F únicas opciones posibles.
Ejemplos:
	heroes_promedio_altura_F.txt
	heroes_promedio_altura_M.txt
Reutilizar las funciones: 'calcular_promedio_genero', 'imprimir_dato' y 'guardar_archivo'.
Esta función retornará True si pudo la lista tiene algún elemento y pudo guardar el archivo, False en caso de que esté vacía o no haya podido guardar el archivo.

----------
PARTE 5

5.1)
Crear la función 'calcular_cantidad_tipo' la cual recibirá por parámetro la lista de héroes y un string que representará el tipo de dato/key a buscar (color_ojos, color_pelo, etc) 
Antes de hacer nada, deberá validar que la lista no esté vacía. En caso de estarlo devolver un diccionario con la siguiente estructura:
{
    "Error": “La lista se encuentra vacía”
}
La función deberá retornar un diccionario con los distintos valores del tipo de dato pasada por parámetro y la cantidad de cada uno (crear un diccionario clave valor).
Por ejemplo, si el tipo de dato fuese color_ojos, devolverá un diccionario de la siguiente manera:
{
    "Celeste": 4,
    "Verde": 8,
    "Marron": 6
}
Reutilizar la función 'capitalizar_palabras' para capitalizar los nombres de las keys.

5.2)
Crear la función 'guardar_cantidad_heroes_tipo' la cual recibirá como parámetro un diccionario que representará las distintas variedades del
tipo de dato (distintos colores de ojos, pelo, etc) como clave con sus respectivas cantidades como valor. Como segundo parámetro recibirá el dato (color_pelo, color_ojos, etc) el cual tendrás que usarlo únicamente en el mensaje final formateado. Esta función deberá iterar cada key del diccionario y variabilizar dicha key con su valor para luego formatearlos en un mensaje el cual deberá guardar en archivo.
Por ejemplo: 
"Caracteristica: color_ojos Blue - Cantidad de heroes: 9"
Reutilizar la función 'guardar_archivo'. El nombre del archivo final deberá respetar el formato:
heroes_cantidad_tipoDato.txt
Donde:
tipoDato: representará el nombre de la key la cual se está evaluando la cantidad de héroes.
Ejemplo:
heroes_cantidad_color_pelo.txt
heroes_cantidad_color_ojos.txt
La función retornará True si salió todo bien, False caso contrario.

5.3)
Crear la función 'stark_calcular_cantidad_por_tipo' la cual recibirá por parámetro la lista de héroes y un string que representará el tipo de dato/key a buscar (color_ojos, color_pelo, etc). Dentro deberás reutilizar 'calcular_cantidad_tipo' y 'guardar_cantidad_heroes_tipo' con la lógica que cada una de esas funciones manejan.
Esta función retornará True si pudo guardar el archivo, False caso contrario.





----------
PARTE 6